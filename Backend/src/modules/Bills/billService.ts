// src/modules/Bills/billService.ts
import { billRepository } from "./billRepository";
import { CreateBillInput, BillUpdateInput } from "./billModel";
import { notifyUser } from "../../utils/lineNotify";

// üóìÔ∏è ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÑ‡∏ó‡∏¢
const formatThaiDate = (dateInput: string | Date) => {
  const date = typeof dateInput === "string" ? new Date(dateInput) : dateInput;
  return date.toLocaleDateString("th-TH", {
    year: "numeric",
    month: "long",
    day: "numeric",
  });
};

export const billService = {
  // üìã ‡∏î‡∏∂‡∏á‡∏ö‡∏¥‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  async getAllBills() {
    return await billRepository.findAll();
  },

  // üîç ‡∏î‡∏∂‡∏á‡∏ö‡∏¥‡∏•‡∏£‡∏≤‡∏¢‡∏ï‡∏±‡∏ß
  async getBillById(billId: string) {
    const bill = await billRepository.findById(billId);
    if (!bill) throw new Error("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ö‡∏¥‡∏•");
    return bill;
  },

  // üßæ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ö‡∏¥‡∏•‡πÉ‡∏´‡∏°‡πà
  async createBill(data: CreateBillInput, adminId: string) {
    const { roomId, customerId, month, wBefore, wAfter, eBefore, eAfter } =
      data;

    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô
    if (!roomId || !customerId || !month || !wAfter || !eAfter)
      throw new Error("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô");

    // üè† ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡πâ‡∏≠‡∏á
    const room = await billRepository.findRoom(roomId);
    if (!room) throw new Error("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡πâ‡∏≠‡∏á");

    // üí∞ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏≤‡∏Ñ‡∏≤‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
    const rent = room.rent;
    const service = 20;
    const wPrice = 19;
    const ePrice = 7;

    // üìÖ ‡∏´‡∏≤‡∏Ñ‡πà‡∏≤‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤
    const billMonth = new Date(month);
    const prevMonth = new Date(billMonth);
    prevMonth.setMonth(prevMonth.getMonth() - 1);

    // üîô ‡∏î‡∏∂‡∏á‡∏ö‡∏¥‡∏•‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤ (‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤ wBefore/eBefore)
    const prevBill = await billRepository.findPrevBill(
      roomId,
      billMonth,
      prevMonth
    );
    const finalWBefore = prevBill ? prevBill.wAfter : (wBefore ?? 0);
    const finalEBefore = prevBill ? prevBill.eAfter : (eBefore ?? 0);

    // ‚öôÔ∏è ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏ô‡πâ‡∏≥/‡πÑ‡∏ü
    const wUnits = wAfter - finalWBefore;
    const eUnits = eAfter - finalEBefore;
    const waterCost = wUnits * wPrice;
    const electricCost = eUnits * ePrice;

    // ‚è∞ ‡∏ß‡∏±‡∏ô‡∏Ñ‡∏£‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ä‡∏≥‡∏£‡∏∞
    const createdAt = new Date();
    const dueDate = new Date(createdAt);
    dueDate.setMonth(dueDate.getMonth() + 1);
    dueDate.setDate(5);

    // üí∏ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡∏õ‡∏£‡∏±‡∏ö‡∏ñ‡πâ‡∏≤‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏≥‡∏´‡∏ô‡∏î
    let fine = 0;
    const today = new Date();
    if (today > dueDate) {
      const diff = today.getTime() - dueDate.getTime();
      const overdueDays = Math.ceil(diff / (1000 * 60 * 60 * 24));
      fine = overdueDays * 50;
    }

    // üíµ ‡∏£‡∏ß‡∏°‡∏¢‡∏≠‡∏î‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    const total = rent + service + waterCost + electricCost + fine;

    // üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    const bill = await billRepository.create({
      month: new Date(month),
      rent,
      service,
      wBefore: finalWBefore,
      wAfter,
      wUnits,
      wPrice,
      waterCost,
      eBefore: finalEBefore,
      eAfter,
      eUnits,
      ePrice,
      electricCost,
      fine,
      total,
      dueDate,
      slipUrl: "",
      status: 0,
      roomId,
      customerId,
      createdBy: adminId,
      createdAt,
    });
    const msg = `üì¢ ‡∏ö‡∏¥‡∏•‡πÉ‡∏´‡∏°‡πà ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì ${bill.customer.userName}
‡∏´‡πâ‡∏≠‡∏á: ${bill.room.number}
‡πÄ‡∏î‡∏∑‡∏≠‡∏ô : ${bill.month.toLocaleDateString("th-TH", { year: "numeric", month: "long" })}\n
-------------------\n
‡∏Ñ‡πà‡∏≤‡πÄ‡∏ä‡πà‡∏≤ : ${bill.rent.toLocaleString()} ‡∏ö‡∏≤‡∏ó
‡∏Ñ‡πà‡∏≤‡∏™‡πà‡∏ß‡∏ô‡∏Å‡∏•‡∏≤‡∏á : ${bill.service.toLocaleString()} ‡∏ö‡∏≤‡∏ó
‡∏Ñ‡πà‡∏≤‡∏ô‡πâ‡∏≥ : ${bill.wUnits} ‡∏´‡∏ô‡πà‡∏ß‡∏¢ ( ${bill.waterCost.toLocaleString()} ‡∏ö‡∏≤‡∏ó )
‡∏Ñ‡πà‡∏≤‡πÑ‡∏ü : ${bill.eUnits} ‡∏´‡∏ô‡πà‡∏ß‡∏¢ ( ${bill.electricCost.toLocaleString()} ‡∏ö‡∏≤‡∏ó )
‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${bill.total.toLocaleString()} ‡∏ö‡∏≤‡∏ó
‡∏Ñ‡∏£‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ä‡∏≥‡∏£‡∏∞: ${formatThaiDate(bill.dueDate)}\n
-------------------\n
‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£ üè´SmartDormüéâ`;

    await notifyUser(bill.customer.userId, msg);
    return bill;
  },

  // üßæ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ö‡∏¥‡∏•‡∏à‡∏≤‡∏Å roomId (‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡πÉ‡∏ä‡πâ)
  async createBillFromRoom(roomId: string, body: any, adminId: string) {
    const { month, wBefore, wAfter, eBefore, eAfter } = body;
    const booking = await billRepository.findBooking(roomId);
    if (!booking) throw new Error("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ö‡∏∏‡πä‡∏Å‡∏Å‡∏¥‡πâ‡∏á‡∏Ç‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏ô‡∏µ‡πâ");

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ö‡∏¥‡∏•‡πÉ‡∏´‡∏°‡πà‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏à‡∏≤‡∏Å booking
    return await this.createBill(
      {
        roomId,
        customerId: booking.customerId,
        month,
        wBefore,
        wAfter,
        eBefore,
        eAfter,
      },
      adminId
    );
  },

  // ‚úèÔ∏è ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ö‡∏¥‡∏•
  async updateBill(billId: string, data: BillUpdateInput, adminId: string) {
    return await billRepository.update(billId, { ...data, updatedBy: adminId });
  },

  // üóëÔ∏è ‡∏•‡∏ö‡∏ö‡∏¥‡∏•
  async deleteBill(billId: string) {
    return await billRepository.delete(billId);
  },
};