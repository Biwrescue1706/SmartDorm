// src/modules/Bookings/bookingRouter.ts
import { Router, Request, Response } from "express";
import multer from "multer";
import QRCode from "qrcode";
import { authMiddleware } from "../../middleware/authMiddleware";
import { bookingService } from "./bookingService";

const router = Router();
const upload = multer({ storage: multer.memoryStorage() });

//  ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
router.get("/getall", async (_req: Request, res: Response) => {
  try {
    const bookings = await bookingService.getAllBookings();
    res.json(bookings);
  } catch {
    res.status(500).json({ error: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÑ‡∏î‡πâ" });
  }
});

//  ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ï‡∏≤‡∏° bookingId
router.get("/:bookingId", async (req: Request, res: Response) => {
  try {
    const booking = await bookingService.getBookingById(req.params.bookingId);
    if (!booking) return res.status(404).json({ error: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á" });
    res.json(booking);
  } catch (err: any) {
    res.status(500).json({ error: err.message });
  }
});

//  ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏à‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á
router.post(
  "/create",
  authMiddleware,
  upload.single("slip"),
  async (req: Request, res: Response) => {
    try {
      const { userId, displayName } = req.user as any; // ‡∏à‡∏≤‡∏Å token ‡∏ó‡∏µ‡πà decode ‡πÅ‡∏•‡πâ‡∏ß

      const booking = await bookingService.createBooking({
        ...req.body,
        slip: req.file,
        userId,
        userName: displayName,
      });

      res.json({ message: "‡∏à‡∏≠‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", booking });
    } catch (err: any) {
      console.error("‚ùå Booking create error:", err);
      res.status(500).json({ error: err.message });
    }
  }
);

/* ============================================================
   ‚úÖ ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥ / ‚ùå ‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò / üè† ‡πÄ‡∏ä‡πá‡∏Ñ‡∏≠‡∏¥‡∏ô / üö™ ‡πÄ‡∏ä‡πá‡∏Ñ‡πÄ‡∏≠‡∏≤‡∏ó‡πå / ‚úèÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç / üóëÔ∏è ‡∏•‡∏ö
============================================================ */

//  Admin ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á
router.put("/:bookingId/approve", authMiddleware, async (req, res) => {
  try {
    const updated = await bookingService.approveBooking(req.params.bookingId);
    res.json({ message: "‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", booking: updated });
  } catch (err: any) {
    res.status(400).json({ error: err.message });
  }
});

//  Admin ‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á
router.put("/:bookingId/reject", authMiddleware, async (req, res) => {
  try {
    const updated = await bookingService.rejectBooking(req.params.bookingId);
    res.json({ message: "‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", booking: updated });
  } catch (err: any) {
    res.status(400).json({ error: err.message });
  }
});

// ‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡πÄ‡∏ä‡πá‡∏Ñ‡∏≠‡∏¥‡∏ô
router.put("/:bookingId/checkin", authMiddleware, async (req, res) => {
  try {
    const updated = await bookingService.checkinBooking(req.params.bookingId);
    res.json({ message: "‡πÄ‡∏ä‡πá‡∏Ñ‡∏≠‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", booking: updated });
  } catch (err: any) {
    res.status(400).json({ error: err.message });
  }
});

//  Admin ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á
router.put("/:bookingId", authMiddleware, async (req, res) => {
  try {
    const updated = await bookingService.updateBooking(
      req.params.bookingId,
      req.body
    );
    res.json({ message: "‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", booking: updated });
  } catch (err: any) {
    res.status(400).json({ error: err.message });
  }
});

//  Admin ‡∏•‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á
router.delete("/:bookingId", authMiddleware, async (req, res) => {
  try {
    await bookingService.deleteBooking(req.params.bookingId);
    res.json({ message: "‡∏•‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à" });
  } catch (err: any) {
    res.status(400).json({ error: err.message });
  }
});

/* üéüÔ∏è ‡∏™‡∏£‡πâ‡∏≤‡∏á QR Code ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á */
router.get("/:bookingId/qrcode", async (req, res) => {
  try {
    const { bookingId } = req.params;
    const booking = await bookingService.getBookingById(bookingId);
    if (!booking) return res.status(404).json({ error: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á" });

    const adminUrl = `https://smartdorm-admin.biwbong.shop/booking/${bookingId}`;
    const qrCode = await QRCode.toDataURL(adminUrl);

    res.json({
      bookingId,
      room: booking.room.number,
      adminUrl,
      qrCode,
    });
  } catch (err: any) {
    res.status(500).json({ error: err.message });
  }
});

export default router;
