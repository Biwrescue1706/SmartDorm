import { Router, Request, Response } from "express";
import { checkoutService } from "./checkoutService";

const router = Router();

/* ============================================================
   üìã ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∑‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (Admin)
============================================================ */
router.get("/getall", async (_req: Request, res: Response) => {
  try {
    const checkouts = await checkoutService.getAllCheckouts();
    res.json(checkouts);
  } catch {
    res.status(500).json({ error: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∑‡∏ô‡πÑ‡∏î‡πâ" });
  }
});

/* ============================================================
   üë§ ‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡πà‡∏≤‡∏î‡∏∂‡∏á Booking ‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á (‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏Ñ‡∏∑‡∏ô‡∏´‡πâ‡∏≠‡∏á)
============================================================ */
router.post("/myBookings", async (req: Request, res: Response) => {
  try {
    const { accessToken } = req.body;
    const bookings = await checkoutService.getMyBookings(accessToken);
    res.json({
      message: "‡∏î‡∏∂‡∏á Booking ‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡∏∑‡∏ô‡πÑ‡∏î‡πâ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
      bookings,
    });
  } catch (err: any) {
    res.status(400).json({ error: err.message });
  }
});

/* ============================================================
   üö™ ‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡πà‡∏≤‡∏Ç‡∏≠‡∏Ñ‡∏∑‡∏ô‡∏´‡πâ‡∏≠‡∏á
============================================================ */
router.put("/:bookingId/checkout", async (req: Request, res: Response) => {
  try {
    const updated = await checkoutService.requestCheckout(
      req.params.bookingId,
      req.body
    );
    res.json({
      message: "‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏Ñ‡∏∑‡∏ô‡∏´‡πâ‡∏≠‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏£‡∏≠‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥",
      booking: updated,
    });
  } catch (err: any) {
    res.status(400).json({ error: err.message });
  }
});

/* ============================================================
   ‚úÖ ‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∑‡∏ô‡∏´‡πâ‡∏≠‡∏á
============================================================ */
router.put("/:bookingId/approveCheckout", async (req: Request, res: Response) => {
  try {
    const updated = await checkoutService.approveCheckout(req.params.bookingId);
    res.json({
      message: "‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∑‡∏ô‡∏´‡πâ‡∏≠‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
      booking: updated,
    });
  } catch (err: any) {
    res.status(400).json({ error: err.message });
  }
});

/* ============================================================
   ‚ùå ‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∑‡∏ô‡∏´‡πâ‡∏≠‡∏á
============================================================ */
router.put("/:bookingId/rejectCheckout", async (req: Request, res: Response) => {
  try {
    const updated = await checkoutService.rejectCheckout(req.params.bookingId);
    res.json({
      message: "‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∑‡∏ô‡∏´‡πâ‡∏≠‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
      booking: updated,
    });
  } catch (err: any) {
    res.status(400).json({ error: err.message });
  }
});

/* ============================================================
   ‚úèÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∑‡∏ô (Admin)
============================================================ */
router.put("/:bookingId", async (req: Request, res: Response) => {
  try {
    const updated = await checkoutService.updateCheckout(
      req.params.bookingId,
      req.body
    );
    res.json({
      message: "‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∑‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
      booking: updated,
    });
  } catch (err: any) {
    res.status(400).json({ error: err.message });
  }
});

/* ============================================================
   üóëÔ∏è ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∑‡∏ô
============================================================ */
router.delete("/:bookingId", async (req: Request, res: Response) => {
  try {
    const updated = await checkoutService.deleteCheckout(req.params.bookingId);
    res.json({
      message: "‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∑‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
      booking: updated,
    });
  } catch (err: any) {
    res.status(400).json({ error: err.message });
  }
});

/* ============================================================
   üö™ ‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∑‡∏ô‡∏´‡πâ‡∏≠‡∏á‡∏à‡∏£‡∏¥‡∏á (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏õ‡∏∏‡πà‡∏°‡∏°‡∏≤‡πÄ‡∏ä‡πá‡∏Ñ‡∏≠‡∏¥‡∏ô)
============================================================ */
router.put("/:bookingId/confirm-return", async (req: Request, res: Response) => {
  try {
    const updated = await checkoutService.confirmReturn(req.params.bookingId);
    res.json({
      message: "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∑‡∏ô‡∏´‡πâ‡∏≠‡∏á‡∏à‡∏£‡∏¥‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
      booking: updated,
    });
  } catch (err: any) {
    res.status(400).json({ error: err.message });
  }
});

export default router;
