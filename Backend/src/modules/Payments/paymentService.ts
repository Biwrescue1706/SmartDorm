// src/modules/Payments/paymentService.ts
import { paymentRepository } from "./paymentRepository";
import { notifyUser } from "../../utils/lineNotify";
import { verifyLineToken } from "../../utils/verifyLineToken";
import { PaymentInput } from "./paymentModel";

// üóìÔ∏è ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÑ‡∏ó‡∏¢
const formatThaiDate = (dateInput: string | Date) => {
  const date = typeof dateInput === "string" ? new Date(dateInput) : dateInput;
  return date.toLocaleDateString("th-TH", {
    year: "numeric",
    month: "long",
    day: "numeric",
  });
};

export const paymentService = {
  // üí∏ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô
  async createPayment(input: PaymentInput) {
    const { billId, accessToken, slip } = input;

    if (!accessToken) throw new Error("‡πÑ‡∏°‡πà‡∏°‡∏µ accessToken ‡∏à‡∏≤‡∏Å LINE LIFF");
    if (!slip) throw new Error("‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏ô‡∏ö‡∏™‡∏•‡∏¥‡∏õ‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞");

    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö token ‡∏à‡∏≤‡∏Å LINE ‡πÅ‡∏•‡∏∞‡∏î‡∏∂‡∏á userId + displayName
    const { userId } = await verifyLineToken(accessToken);

    // üë§ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
    const customer = await paymentRepository.findCustomerByUserId(userId);
    if (!customer) throw new Error("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤");

    // üßæ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ö‡∏¥‡∏•
    const bill = await paymentRepository.findBillById(billId);
    if (!bill) throw new Error("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ö‡∏¥‡∏•");
    if (bill.customerId !== customer.customerId)
      throw new Error("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏™‡πà‡∏á‡∏™‡∏•‡∏¥‡∏õ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏¥‡∏•‡∏ô‡∏µ‡πâ");
    if (bill.status === 1) throw new Error("‡∏ö‡∏¥‡∏•‡∏ô‡∏µ‡πâ‡∏ä‡∏≥‡∏£‡∏∞‡πÅ‡∏•‡πâ‡∏ß");

    // üì§ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏•‡∏¥‡∏õ‡πÑ‡∏õ Supabase
    const slipUrl = await paymentRepository.uploadSlipToSupabase(slip);

    // üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    const [payment, updatedBill] = await paymentRepository.createPaymentAndUpdateBill(
      billId,
      slipUrl,
      bill.customerId
    );
    
    const adminMsg = `üì¢ ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡∏ö‡∏¥‡∏•‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤
‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì : ${bill.customer.userName} \n
-----------‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤----------\n
‡∏ä‡∏∑‡πà‡∏≠ : ${bill.customer.fullName}
‡∏´‡πâ‡∏≠‡∏á : ${bill.room.number}
‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£ : ${bill.customer.cphone}
‡∏£‡∏´‡∏±‡∏™‡∏ö‡∏¥‡∏• : ${bill.billId}
‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ä‡∏≥‡∏£‡∏∞ : ${formatThaiDate(bill.createdAt)}
‡∏™‡∏•‡∏¥‡∏õ: ${bill.slipUrl || "‡πÑ‡∏°‡πà‡∏°‡∏µ"}\n
-------------------\n
‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà : https://smartdorm-admin.biwbong.shop`;

    const userMsg = `üì¢ ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏™‡πà‡∏á‡∏™‡∏•‡∏¥‡∏õ‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡∏ö‡∏¥‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß
-----------‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤----------\n
‡∏£‡∏´‡∏±‡∏™‡∏ö‡∏¥‡∏• : ${bill.billId}
‡∏£‡∏´‡∏±‡∏™‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡∏ö‡∏¥‡∏• : ${payment.paymentId}
‡∏¢‡∏≠‡∏î‡∏ä‡∏≥‡∏£‡∏∞ : ${bill.total} ‡∏ö‡∏≤‡∏ó
‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ä‡∏≥‡∏£‡∏∞ : ${formatThaiDate(payment.createdAt)}\n
--------------------\n
‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£ üè´SmartDormüéâ ‡∏Ñ‡∏£‡∏±‡∏ö`;

    await notifyUser(bill.customer.userId, userMsg);
    if (process.env.ADMIN_LINE_ID)
      await notifyUser(process.env.ADMIN_LINE_ID, adminMsg);

    return { payment, bill: updatedBill };
  },
};
