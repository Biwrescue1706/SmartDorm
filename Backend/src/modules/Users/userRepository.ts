import prisma from "../../prisma";

export const userRepository = {

    // üë§ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  async findAllCustomers() {
    return prisma.customer.findMany({
      orderBy: { createdAt: "desc" },
      include: {
        bookings: true,
        bills: true,
      },
    });
  },

  // üë§ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏à‡∏≤‡∏Å userId (LINE)
  async findCustomerByUserId(userId: string) {
    return prisma.customer.findFirst({ where: { userId } });
  },

  // üßæ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà
  async createCustomer(data: any) {
    return prisma.customer.create({ data });
  },

  // ‚úèÔ∏è ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
  async updateCustomer(customerId: string, data: any) {
    return prisma.customer.update({ where: { customerId }, data });
  },

  // üì¶ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏û‡∏£‡πâ‡∏≠‡∏° bookings ‡πÅ‡∏•‡∏∞ bills
  async getCustomerWithRelations(userId: string) {
    return prisma.customer.findFirst({
      where: { userId },
      include: {
        bookings: { include: { room: true }, orderBy: { createdAt: "desc" } },
        bills: {
          include: { room: true, payment: true },
          orderBy: { createdAt: "desc" },
        },
      },
    });
  },

  // üí∞ ‡∏î‡∏∂‡∏á‡∏ö‡∏¥‡∏•‡∏ó‡∏µ‡πà‡∏ä‡∏≥‡∏£‡∏∞‡πÅ‡∏•‡πâ‡∏ß
  async findPaidBills(customerId: string) {
    return prisma.bill.findMany({
      where: { customerId, status: 1 },
      orderBy: { createdAt: "desc" },
      include: { room: true, payment: true },
    });
  },

  // üí∏ ‡∏î‡∏∂‡∏á‡∏ö‡∏¥‡∏•‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ä‡∏≥‡∏£‡∏∞
  async findUnpaidBills(customerId: string) {
    return prisma.bill.findMany({
      where: { customerId, status: 0 },
      orderBy: { createdAt: "desc" },
      include: { room: true },
    });
  },

  // üö™ ‡∏î‡∏∂‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡∏∑‡∏ô‡∏´‡πâ‡∏≠‡∏á‡πÑ‡∏î‡πâ
  async findReturnableBookings(customerId: string) {
    return prisma.booking.findMany({
      where: {
        customerId,
        approveStatus: 1,
        checkinStatus: 1,
        checkoutStatus: 0,
      },
      include: { room: true },
      orderBy: { createdAt: "desc" },
    });
  },

    // üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏à‡∏≤‡∏Å‡∏ä‡∏∑‡πà‡∏≠ / ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£ / ‡∏´‡πâ‡∏≠‡∏á
  async searchCustomers(keyword: string) {
    const kw = keyword.trim();

    // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ keyword ‡πÉ‡∏´‡πâ return ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÅ‡∏ó‡∏ô
    if (!kw) return this.findAllCustomers();

    return prisma.customer.findMany({
      where: {
        OR: [
          { fullName: { contains: kw, mode: "insensitive" } },
          { userName: { contains: kw, mode: "insensitive" } },
          { cphone: { contains: kw, mode: "insensitive" } },
          {
            bookings: {
              some: {
                room: {
                  number: { contains: kw, mode: "insensitive" },
                },
              },
            },
          },
        ],
      },
      include: {
        bookings: { include: { room: true }, orderBy: { createdAt: "desc" } },
        bills: { include: { room: true }, orderBy: { createdAt: "desc" } },
      },
      orderBy: { createdAt: "desc" },
    });
  },

};
