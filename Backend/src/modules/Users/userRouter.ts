import { Router, Request, Response } from "express";
import { userService } from "./userService";
import { verifyLineToken } from "../../utils/verifyLineToken";

const router = Router();

// üìã ‡∏î‡∏∂‡∏á‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (Admin)
router.get("/getall", async (_req: Request, res: Response) => {
  try {
    const users = await userService.getAllUsers();
    res.json({
      message: "‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
      count: users.length,
      users,
    });
  } catch (err: any) {
    res.status(400).json({ error: err.message });
  }
});

// üß© ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
router.post("/register", async (req: Request, res: Response) => {
  try {
    const customer = await userService.register(req.body);
    res.json({ message: "‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", customer });
  } catch (err: any) {
    res.status(400).json({ error: err.message });
  }
});

// üë§ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ (‡∏û‡∏£‡πâ‡∏≠‡∏° bookings / bills)
router.post("/me", async (req, res) => {
  try {
    const { accessToken } = req.body;
    const profile = await verifyLineToken(accessToken);

    return res.json({
      success: true,
      userId: profile.userId,
      displayName: profile.displayName,
    });
  } catch (err: any) {
    return res.status(401).json({
      success: false,
      error: err.message,
    });
  }
});

// üí∞ ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ö‡∏¥‡∏•‡∏ó‡∏µ‡πà‡∏ä‡∏≥‡∏£‡∏∞‡πÅ‡∏•‡πâ‡∏ß
router.post("/payments", async (req: Request, res: Response) => {
  try {
    const bills = await userService.getPaidBills(req.body.accessToken);
    res.json({
      message: "‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ö‡∏¥‡∏•‡∏ó‡∏µ‡πà‡∏ä‡∏≥‡∏£‡∏∞‡πÅ‡∏•‡πâ‡∏ß‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
      count: bills.length,
      bills,
    });
  } catch (err: any) {
    res.status(400).json({ error: err.message });
  }
});

// üí∏ ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ö‡∏¥‡∏•‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ä‡∏≥‡∏£‡∏∞
router.post("/bills/unpaid", async (req: Request, res: Response) => {
  try {
    const bills = await userService.getUnpaidBills(req.body.accessToken);
    res.json({
      message: "‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ö‡∏¥‡∏•‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ä‡∏≥‡∏£‡∏∞‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
      count: bills.length,
      bills,
    });
  } catch (err: any) {
    res.status(400).json({ error: err.message });
  }
});

// üö™ ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡∏∑‡∏ô‡πÑ‡∏î‡πâ
router.post("/bookings/returnable", async (req: Request, res: Response) => {
  try {
    const bookings = await userService.getReturnableBookings(
      req.body.accessToken
    );
    res.json({
      message: "‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡∏∑‡∏ô‡πÑ‡∏î‡πâ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
      count: bookings.length,
      bookings,
    });
  } catch (err: any) {
    res.status(400).json({ error: err.message });
  }
});

// üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏à‡∏≤‡∏Å‡∏ä‡∏∑‡πà‡∏≠ / ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£ / ‡∏´‡πâ‡∏≠‡∏á
router.get("/search", async (req: Request, res: Response) => {
  try {
    const keyword = req.query.keyword?.toString() || "";
    const users = await userService.searchUsers(keyword);
    res.json({
      message: `‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (${users.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£)`,
      keyword,
      users,
    });
  } catch (err: any) {
    res.status(400).json({ error: err.message });
  }
});

// ‚ùå ‡∏•‡∏ö‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
router.delete("/:customerId", async (req, res) => {
  try {
    const { customerId } = req.params;
    if (!customerId) throw new Error("customerId is required");

    await userService.deleteUser(customerId);
    res.json({ message: "‡∏•‡∏ö‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à" });
  } catch (err: any) {
    res.status(400).json({ error: err.message });
  }
});

export default router;
