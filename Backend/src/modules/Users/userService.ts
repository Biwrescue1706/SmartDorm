// src/modules/User/userService.ts
import prisma from "../../prisma";
import { userRepository } from "./userRepository";
import { RegisterInput } from "./userModel";
import { verifyLineToken } from "../../utils/verifyLineToken";

export const userService = {
  // üß© ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
  async register(input: RegisterInput) {
    const { accessToken, ctitle, cname, csurname, cphone, cmumId } = input;
    const { userId, displayName } = await verifyLineToken(accessToken);
    const fullName = `${ctitle}${cname} ${csurname ?? ""}`.trim();

    let customer = await userRepository.findCustomerByUserId(userId);

    if (customer) {
      customer = await userRepository.updateCustomer(customer.customerId, {
        userName: displayName,
        ctitle,
        cname,
        csurname,
        cphone,
        cmumId,
        fullName,
      });
    } else {
      customer = await userRepository.createCustomer({
        userId,
        userName: displayName,
        ctitle,
        cname,
        csurname,
        cphone,
        cmumId,
        fullName,
      });
    }

    return customer;
  },

  // üìã ‡∏î‡∏∂‡∏á‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (Admin)
  async getAllUsers() {
    const users = await userRepository.findAllCustomers();
    if (!users.length) throw new Error("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö");
    return users;
  },

  // üë§ ‡∏î‡∏∂‡∏á‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
  async getProfile(accessToken: string) {
    const { userId } = await verifyLineToken(accessToken);
    const customer = await userRepository.getCustomerWithRelations(userId);
    if (!customer) throw new Error("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤");
    return customer;
  },

  // üí∞ ‡∏î‡∏∂‡∏á‡∏ö‡∏¥‡∏•‡∏ó‡∏µ‡πà‡∏ä‡∏≥‡∏£‡∏∞‡πÅ‡∏•‡πâ‡∏ß
  async getPaidBills(accessToken: string) {
    const { userId } = await verifyLineToken(accessToken);
    const customer = await userRepository.findCustomerByUserId(userId);
    if (!customer) throw new Error("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤");

    const bills = await userRepository.findPaidBills(customer.customerId);
    return bills.map((b) => ({
      billCode: b.billId.slice(-6).toUpperCase(),
      roomNumber: b.room.number,
      total: b.total,
      slipUrl: b.payment?.slipUrl,
      paidAt: b.payment?.createdAt,
    }));
  },

  // üí∏ ‡∏î‡∏∂‡∏á‡∏ö‡∏¥‡∏•‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ä‡∏≥‡∏£‡∏∞
  async getUnpaidBills(accessToken: string) {
    const { userId } = await verifyLineToken(accessToken);
    const customer = await userRepository.findCustomerByUserId(userId);
    if (!customer) throw new Error("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤");
    return userRepository.findUnpaidBills(customer.customerId);
  },

  // üö™ ‡∏î‡∏∂‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡∏∑‡∏ô‡∏´‡πâ‡∏≠‡∏á‡πÑ‡∏î‡πâ
  async getReturnableBookings(accessToken: string) {
    const { userId } = await verifyLineToken(accessToken);
    const customer = await userRepository.findCustomerByUserId(userId);
    if (!customer) throw new Error("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤");
    return userRepository.findReturnableBookings(customer.customerId);
  },

  // üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ï‡∏≤‡∏°‡∏ä‡∏∑‡πà‡∏≠ / ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£ / ‡∏´‡πâ‡∏≠‡∏á
  async searchUsers(keyword: string) {
    return userRepository.searchCustomers(keyword);
  },

  // ‚ùå ‡∏•‡∏ö‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
  async deleteUser(customerId: string) {
    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ booking ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡πÑ‡∏´‡∏°
    const existingBooking = await prisma.booking.findFirst({
      where: { customerId },
    });

    if (existingBooking) {
      throw new Error("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÑ‡∏î‡πâ ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà");
    }

    // ‚úÖ ‡∏•‡∏ö‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
    await prisma.customer.delete({
      where: { customerId },
    });

    return { success: true };
  },
};
