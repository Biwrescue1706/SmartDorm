import { useState, useEffect } from "react";
import Swal from "sweetalert2";
import { API_BASE } from "../config";
import type { Booking } from "../types/Checkout";
import {
  GetAllCheckout,
  ApproveCheckout,
  RejectCheckout,
  DeleteCheckout,
  EditCheckout,
  ConfirmReturn,
} from "../apis/endpoint.api";

export function useCheckouts() {
  const [checkouts, setCheckouts] = useState<Booking[]>([]);
  const [loading, setLoading] = useState(true);

  //  ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  const fetchCheckouts = async () => {
    try {
      const res = await fetch(`${API_BASE}${GetAllCheckout}`, {
        method: "GET",
        credentials: "include",
      });
      if (!res.ok) throw new Error("‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß");
      const data: Booking[] = await res.json();
      setCheckouts(data);
    } catch {
      Swal.fire({
        icon: "error",
        title: "‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î",
        text: "‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∑‡∏ô‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
        timer: 1500,
        showConfirmButton: false,
      });
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchCheckouts();
  }, []);

  //  ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∑‡∏ô
  const approveCheckout = async (id: string) => {
    const confirm = await Swal.fire({
      title: "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥?",
      icon: "question",
      showCancelButton: true,
      confirmButtonText: "‡πÉ‡∏ä‡πà",
      cancelButtonText: "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å",
    });
    if (!confirm.isConfirmed) return;

    try {
      const res = await fetch(`${API_BASE}${ApproveCheckout(id)}`, {
        method: "PUT",
        credentials: "include",
      });
      if (!res.ok) throw new Error();
      Swal.fire({
        icon: "success",
        title: "‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∑‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
        timer: 1500,
        showConfirmButton: false,
      });
      fetchCheckouts();
    } catch {
      Swal.fire({
        icon: "error",
        title: "‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß",
        text: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÑ‡∏î‡πâ",
        timer: 1500,
        showConfirmButton: false,
      });
    }
  };

  // ‚ùå ‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∑‡∏ô
  const rejectCheckout = async (id: string) => {
    const confirm = await Swal.fire({
      title: "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò?",
      icon: "warning",
      showCancelButton: true,
      confirmButtonText: "‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò",
      cancelButtonText: "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å",
    });
    if (!confirm.isConfirmed) return;

    try {
      const res = await fetch(`${API_BASE}${RejectCheckout(id)}`, {
        method: "PUT",
        credentials: "include",
      });
      if (!res.ok) throw new Error();
      Swal.fire({
        icon: "success",
        title: "‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∑‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
        timer: 1500,
        showConfirmButton: false,
      });
      fetchCheckouts();
    } catch {
      Swal.fire({
        icon: "error",
        title: "‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß",
        text: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∑‡∏ô‡πÑ‡∏î‡πâ",
        timer: 1500,
        showConfirmButton: false,
      });
    }
  };

  // üóëÔ∏è ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∑‡∏ô
  const deleteCheckout = async (id: string, roomNum: string) => {
    const confirm = await Swal.fire({
      title: `‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∑‡∏ô‡∏´‡πâ‡∏≠‡∏á ${roomNum}?`,
      icon: "warning",
      showCancelButton: true,
      confirmButtonText: "‡∏•‡∏ö",
      cancelButtonText: "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å",
    });
    if (!confirm.isConfirmed) return;

    try {
      const res = await fetch(`${API_BASE}${DeleteCheckout(id)}`, {
        method: "DELETE",
        credentials: "include",
      });
      if (!res.ok) throw new Error();
      Swal.fire({
        icon: "success",
        title: "‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
        timer: 1500,
        showConfirmButton: false,
      });
      fetchCheckouts();
    } catch {
      Swal.fire({
        icon: "error",
        title: "‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß",
        text: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ",
        timer: 1500,
        showConfirmButton: false,
      });
    }
  };

  // ‚úèÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏∑‡∏ô‡∏´‡πâ‡∏≠‡∏á
  const editCheckout = async (
    bookingId: string,
    values: { checkout: string }
  ) => {
    try {
      const res = await fetch(`${API_BASE}${EditCheckout(bookingId)}`, {
        method: "PUT",
        credentials: "include",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(values),
      });
      if (!res.ok) throw new Error();
      Swal.fire({
        icon: "success",
        title: "‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
        text: "‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∑‡∏ô‡πÅ‡∏•‡πâ‡∏ß",
        timer: 1500,
        showConfirmButton: false,
      });
      fetchCheckouts();
    } catch {
      Swal.fire({
        icon: "error",
        title: "‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß",
        text: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ",
        timer: 1500,
        showConfirmButton: false,
      });
    }
  };

  // üö™ ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏Ñ‡∏∑‡∏ô‡∏´‡πâ‡∏≠‡∏á‡∏à‡∏£‡∏¥‡∏á (Confirm Return)
  const confirmReturn = async (id: string) => {
    const confirm = await Swal.fire({
      title: "‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏Ñ‡∏∑‡∏ô‡∏´‡πâ‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ä‡πà‡πÑ‡∏´‡∏°?",
      icon: "question",
      showCancelButton: true,
      confirmButtonText: "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô",
      cancelButtonText: "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å",
    });
    if (!confirm.isConfirmed) return;

    try {
      const res = await fetch(`${API_BASE}${ConfirmReturn(id)}`, {
        method: "PUT",
        credentials: "include",
      });
      if (!res.ok) throw new Error();
      Swal.fire({
        icon: "success",
        title: "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
        text: "‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏Ñ‡∏∑‡∏ô‡∏´‡πâ‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß",
        timer: 1500,
        showConfirmButton: false,
      });
      fetchCheckouts();
    } catch {
      Swal.fire({
        icon: "error",
        title: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î",
        text: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∑‡∏ô‡∏´‡πâ‡∏≠‡∏á‡πÑ‡∏î‡πâ",
        timer: 1500,
        showConfirmButton: false,
      });
    }
  };

  return {
    checkouts,
    loading,
    fetchCheckouts,
    approveCheckout,
    rejectCheckout,
    deleteCheckout,
    editCheckout,
    confirmReturn, //  ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á
  };
}
