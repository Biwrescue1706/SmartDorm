import { useState, useEffect } from "react";
import Nav from "../components/Nav";
import { useAuth } from "../hooks/useAuth";
import { useCreateBill } from "../hooks/useCreateBill";
import BillTable from "../components/Bills/BillTable";
import BillDialog from "../components/Bills/BillDialog";
import Pagination from "../components/Pagination";
import "bootstrap/dist/css/bootstrap.min.css";

export default function Bills() {
  const { message, handleLogout, role } = useAuth();

  // ‚úÖ Hook ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  const {
    rooms,
    bookings,
    existingBills,
    loading,
    pendingBookings,
    reloadAll,
  } = useCreateBill();

  const [openDialog, setOpenDialog] = useState(false);
  const [selectedRoom, setSelectedRoom] = useState<any>(null);

  // ‚úÖ Pagination
  const [currentPage, setCurrentPage] = useState(1);
  const [rowsPerPage, setRowsPerPage] = useState(10);

  const [canCreateBill, setCanCreateBill] = useState(false);
  const [todayStr, setTodayStr] = useState("");

  // üóìÔ∏è ‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏ó‡∏¢
  const formatThaiDate = (dateString: string) => {
    const date = new Date(dateString);
    const monthsThai = [
      "‡∏°.‡∏Ñ.",
      "‡∏Å.‡∏û.",
      "‡∏°‡∏µ.‡∏Ñ.",
      "‡πÄ‡∏°.‡∏¢.",
      "‡∏û.‡∏Ñ.",
      "‡∏°‡∏¥.‡∏¢.",
      "‡∏Å.‡∏Ñ.",
      "‡∏™.‡∏Ñ.",
      "‡∏Å.‡∏¢.",
      "‡∏ï.‡∏Ñ.",
      "‡∏û.‡∏¢.",
      "‡∏ò.‡∏Ñ.",
    ];
    return `${date.getDate()} ${monthsThai[date.getMonth()]} ${
      date.getFullYear() + 543
    }`;
  };

  // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡πà‡∏≤‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏≠‡∏Å‡∏ö‡∏¥‡∏•‡πÑ‡∏î‡πâ (‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà 15‚Äì31 ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô)
  useEffect(() => {
    const now = new Date();
    setTodayStr(formatThaiDate(now.toISOString()));
    setCanCreateBill(now.getDate() >= 15 && now.getDate() <= 31);
  }, []);

  // ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏õ‡∏¥‡∏î Dialog
  const handleOpenDialog = (room: any) => {
    setSelectedRoom(room);
    setOpenDialog(true);
  };

  // ‚úÖ Pagination Logic
  const totalItems = rooms.length;
  const startIndex = (currentPage - 1) * rowsPerPage;
  const paginatedRooms = rooms.slice(startIndex, startIndex + rowsPerPage);

  // ‡∏ñ‡πâ‡∏≤‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (‡πÄ‡∏ä‡πà‡∏ô‡∏´‡∏•‡∏±‡∏á reload)
  useEffect(() => {
    const totalPages = Math.ceil(totalItems / rowsPerPage);
    if (currentPage > totalPages && totalPages > 0) {
      setCurrentPage(totalPages);
    }
  }, [totalItems, rowsPerPage, currentPage]);

  return (
    <div
      className="d-flex flex-column"
      style={{ backgroundColor: "#f4f7fb", minHeight: "100vh" }}
    >
      {/* üîπ Navbar */}
      <Nav
        message={message}
        onLogout={handleLogout}
        pendingBookings={pendingBookings}
        role={role}
      />

      {/* üîπ ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤ */}
      <main className="main-content flex-grow-1 px-2 py-4 mt-4">
        <div className="container">
          <h2 className="fw-bold text-center mb-3">‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ö‡∏¥‡∏•‡∏´‡πâ‡∏≠‡∏á‡∏û‡∏±‡∏Å</h2>
          <p className="text-center text-muted">
            ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ: <b>{todayStr}</b>
          </p>

          {!canCreateBill && (
            <div className="alert alert-warning text-center fw-semibold">
              ‡∏≠‡∏≠‡∏Å‡∏ö‡∏¥‡∏•‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà <b>15‚Äì31 ‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡∏∑‡∏≠‡∏ô</b> ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
            </div>
          )}

          {loading ? (
            <p className="text-center text-secondary mt-3">
              ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...
            </p>
          ) : (
            <>
              {/* ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏û‡∏±‡∏Å */}
              <BillTable
                rooms={paginatedRooms}
                bookings={bookings}
                existingBills={existingBills}
                canCreateBill={canCreateBill}
                formatThaiDate={formatThaiDate}
                onCreateBill={handleOpenDialog}
              />

              {/* ‚úÖ Pagination ‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á */}
              <Pagination
                currentPage={currentPage}
                totalItems={totalItems}
                rowsPerPage={rowsPerPage}
                onPageChange={setCurrentPage}
                onRowsPerPageChange={(rows) => {
                  setRowsPerPage(rows);
                  setCurrentPage(1); // ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏ñ‡∏ß
                }}
              />
            </>
          )}
        </div>
      </main>

      {/* üîπ Dialog ‡∏≠‡∏≠‡∏Å‡∏ö‡∏¥‡∏• */}
      <BillDialog
        open={openDialog}
        onClose={() => setOpenDialog(false)}
        room={selectedRoom}
        reloadExistingBills={reloadAll}
      />
    </div>
  );
}
