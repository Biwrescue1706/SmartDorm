import { useState, useEffect } from "react";
import Swal from "sweetalert2";
import RoomTable from "../components/Room/RoomTable";
import AddRoomDialog from "../components/Room/AddRoomDialog";
import Pagination from "../components/Pagination";
import Nav from "../components/Nav";
import { useAuth } from "../hooks/useAuth";
import { useRooms } from "../hooks/useRooms";

export default function Rooms() {
  const { rooms, loading, fetchRooms } = useRooms();
  const { message, handleLogout, role } = useAuth();
  const [pendingBookings] = useState(0);

  // ‡πÇ‡∏´‡∏•‡∏î‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤
  useEffect(() => {
    fetchRooms();
  }, []);

  // ‚úÖ state ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏£‡∏≠‡∏á‡∏ä‡∏±‡πâ‡∏ô
  const [selectedFloor, setSelectedFloor] = useState("‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î");

  // ‚úÖ ‡∏ü‡∏¥‡∏•‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏´‡πâ‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏ä‡∏±‡πâ‡∏ô (‡πÅ‡∏ö‡∏ö‡∏´‡∏≤‡∏£ 100 ‡∏•‡∏á‡∏ï‡∏±‡∏ß)
  const filteredRooms =
    selectedFloor === "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"
      ? rooms
      : rooms.filter((r) => {
          const num = parseInt(r.number, 10);
          const floorNum = parseInt(selectedFloor, 10);
          // ‡∏´‡πâ‡∏≠‡∏á‡∏à‡∏∞‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡∏±‡πâ‡∏ô‡∏ô‡∏±‡πâ‡∏ô ‡∏ñ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏≠‡∏¢‡∏π‡πà‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á floor*100 ‡∏ñ‡∏∂‡∏á floor*100 + 99
          return num >= floorNum * 100 && num < (floorNum + 1) * 100;
        });

  // Pagination
  const [currentPage, setCurrentPage] = useState(1);
  const [rowsPerPage, setRowsPerPage] = useState(10);
  const indexOfLast = currentPage * rowsPerPage;
  const indexOfFirst = indexOfLast - rowsPerPage;
  const currentRooms = filteredRooms.slice(indexOfFirst, indexOfLast);

  // ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
  const handleRefresh = async () => {
    try {
      await fetchRooms();
    } catch (err) {
      Swal.fire("‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß", (err as Error).message, "error");
    }
  };

  return (
    <div className="d-flex min-vh-100 bg-white">
      {/* Sidebar */}
      <Nav
        message={message}
        onLogout={handleLogout}
        pendingBookings={pendingBookings}
        role={role}
      />

      {/* Main Content */}
      <main className="main-content flex-grow-1 px-1 py-2 mt-6 mt-lg-7">
        <div className="mx-auto container-max">
          {/* ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠ */}
          <div className="d-flex justify-content-center align-items-center mb-3 mt-3">
            <h2 className="fw-bold text-dark">üè† ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏´‡πâ‡∏≠‡∏á‡∏û‡∏±‡∏Å</h2>
          </div>

          {/* ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡πâ‡∏≠‡∏á */}
          <div className="text-center mb-4">
            <AddRoomDialog onSuccess={handleRefresh} />
          </div>

          {/* üîΩ ‡∏î‡∏£‡∏≠‡∏õ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡∏±‡πâ‡∏ô (‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ï‡πâ‡∏õ‡∏∏‡πà‡∏°) */}
          <div className="text-center mb-4">
            <label className="fw-semibold me-2 fs-5 text-dark">
              ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡∏±‡πâ‡∏ô : 
            </label>
            <select
              className="form-select d-inline-block text-center fw-semibold shadow-sm"
              style={{
                width: "220px",
                fontSize: "1.05rem",
                borderRadius: "10px",
                border: "2px solid #0d6efd",
              }}
              value={selectedFloor}
              onChange={(e) => {
                setSelectedFloor(e.target.value);
                setCurrentPage(1);
              }}
            >
              <option value="‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î">‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</option>
              {[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11].map((floor) => (
                <option key={floor} value={floor.toString()}>
                  ‡∏ä‡∏±‡πâ‡∏ô {floor}
                </option>
              ))}
            </select>
          </div>

          {/* ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡πâ‡∏≠‡∏á */}
          {loading ? (
            <div className="text-center my-5">
              <div className="spinner-border text-success" role="status"></div>
              <p className="mt-3 text-muted">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡πâ‡∏≠‡∏á...</p>
            </div>
          ) : (
            <>
              <RoomTable
                rooms={currentRooms}
                startIndex={indexOfFirst}
                onUpdated={handleRefresh}
              />

              <Pagination
                currentPage={currentPage}
                totalItems={filteredRooms.length}
                rowsPerPage={rowsPerPage}
                onPageChange={(page) => setCurrentPage(page)}
                onRowsPerPageChange={(rows) => {
                  setRowsPerPage(rows);
                  setCurrentPage(1);
                }}
              />
            </>
          )}
        </div>
      </main>
    </div>
  );
}
